import {
  init_utils,
  isAdornedStart,
  isFilled
} from "./chunk-JMZL466M.js";
import {
  FormControlContext_default,
  init_FormControlContext,
  init_useFormControl,
  useFormControl
} from "./chunk-PLURPH2K.js";
import {
  init_isMuiElement,
  isMuiElement_default
} from "./chunk-QNY2ENWZ.js";
import {
  init_base
} from "./chunk-RQPXEAQD.js";
import {
  capitalize_default,
  init_capitalize
} from "./chunk-2O6VOPW3.js";
import {
  _objectWithoutPropertiesLoose,
  clsx_m_default,
  init_clsx_m,
  init_generateUtilityClass,
  init_objectWithoutPropertiesLoose,
  init_styled,
  init_useThemeProps,
  styled_default,
  useThemeProps2 as useThemeProps
} from "./chunk-A6WVLAIF.js";
import {
  _extends,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_esm,
  init_extends
} from "./chunk-IWESGBR7.js";
import {
  require_prop_types
} from "./chunk-OU6AYCXY.js";
import {
  require_jsx_runtime
} from "./chunk-FEVPAJEA.js";
import {
  require_react
} from "./chunk-X6MODOAL.js";
import {
  __esm,
  __export,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/@mui/material/esm/FormControl/formControlClasses.js
function getFormControlUtilityClasses(slot) {
  return generateUtilityClass("MuiFormControl", slot);
}
var formControlClasses, formControlClasses_default;
var init_formControlClasses = __esm({
  "node_modules/@mui/material/esm/FormControl/formControlClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    formControlClasses = generateUtilityClasses("MuiFormControl", ["root", "marginNone", "marginNormal", "marginDense", "fullWidth", "disabled"]);
    formControlClasses_default = formControlClasses;
  }
});

// node_modules/@mui/material/esm/FormControl/FormControl.js
var React, import_prop_types, import_jsx_runtime, _excluded, useUtilityClasses, FormControlRoot, FormControl, FormControl_default;
var init_FormControl = __esm({
  "node_modules/@mui/material/esm/FormControl/FormControl.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx_m();
    init_base();
    init_useThemeProps();
    init_styled();
    init_utils();
    init_capitalize();
    init_isMuiElement();
    init_FormControlContext();
    init_formControlClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    _excluded = ["children", "className", "color", "component", "disabled", "error", "focused", "fullWidth", "hiddenLabel", "margin", "required", "size", "variant"];
    useUtilityClasses = (ownerState) => {
      const {
        classes,
        margin,
        fullWidth
      } = ownerState;
      const slots = {
        root: ["root", margin !== "none" && `margin${capitalize_default(margin)}`, fullWidth && "fullWidth"]
      };
      return composeClasses(slots, getFormControlUtilityClasses, classes);
    };
    FormControlRoot = styled_default("div", {
      name: "MuiFormControl",
      slot: "Root",
      overridesResolver: ({
        ownerState
      }, styles) => {
        return _extends({}, styles.root, styles[`margin${capitalize_default(ownerState.margin)}`], ownerState.fullWidth && styles.fullWidth);
      }
    })(({
      ownerState
    }) => _extends({
      display: "inline-flex",
      flexDirection: "column",
      position: "relative",
      minWidth: 0,
      padding: 0,
      margin: 0,
      border: 0,
      verticalAlign: "top"
    }, ownerState.margin === "normal" && {
      marginTop: 16,
      marginBottom: 8
    }, ownerState.margin === "dense" && {
      marginTop: 8,
      marginBottom: 4
    }, ownerState.fullWidth && {
      width: "100%"
    }));
    FormControl = React.forwardRef(function FormControl2(inProps, ref) {
      const props = useThemeProps({
        props: inProps,
        name: "MuiFormControl"
      });
      const {
        children,
        className,
        color = "primary",
        component = "div",
        disabled = false,
        error = false,
        focused: visuallyFocused,
        fullWidth = false,
        hiddenLabel = false,
        margin = "none",
        required = false,
        size = "medium",
        variant = "outlined"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const ownerState = _extends({}, props, {
        color,
        component,
        disabled,
        error,
        fullWidth,
        hiddenLabel,
        margin,
        required,
        size,
        variant
      });
      const classes = useUtilityClasses(ownerState);
      const [adornedStart, setAdornedStart] = React.useState(() => {
        let initialAdornedStart = false;
        if (children) {
          React.Children.forEach(children, (child) => {
            if (!isMuiElement_default(child, ["Input", "Select"])) {
              return;
            }
            const input = isMuiElement_default(child, ["Select"]) ? child.props.input : child;
            if (input && isAdornedStart(input.props)) {
              initialAdornedStart = true;
            }
          });
        }
        return initialAdornedStart;
      });
      const [filled, setFilled] = React.useState(() => {
        let initialFilled = false;
        if (children) {
          React.Children.forEach(children, (child) => {
            if (!isMuiElement_default(child, ["Input", "Select"])) {
              return;
            }
            if (isFilled(child.props, true)) {
              initialFilled = true;
            }
          });
        }
        return initialFilled;
      });
      const [focusedState, setFocused] = React.useState(false);
      if (disabled && focusedState) {
        setFocused(false);
      }
      const focused = visuallyFocused !== void 0 && !disabled ? visuallyFocused : focusedState;
      let registerEffect;
      if (true) {
        const registeredInput = React.useRef(false);
        registerEffect = () => {
          if (registeredInput.current) {
            console.error(["MUI: There are multiple `InputBase` components inside a FormControl.", "This creates visual inconsistencies, only use one `InputBase`."].join("\n"));
          }
          registeredInput.current = true;
          return () => {
            registeredInput.current = false;
          };
        };
      }
      const childContext = React.useMemo(() => {
        return {
          adornedStart,
          setAdornedStart,
          color,
          disabled,
          error,
          filled,
          focused,
          fullWidth,
          hiddenLabel,
          size,
          onBlur: () => {
            setFocused(false);
          },
          onEmpty: () => {
            setFilled(false);
          },
          onFilled: () => {
            setFilled(true);
          },
          onFocus: () => {
            setFocused(true);
          },
          registerEffect,
          required,
          variant
        };
      }, [adornedStart, color, disabled, error, filled, focused, fullWidth, hiddenLabel, registerEffect, required, size, variant]);
      return (0, import_jsx_runtime.jsx)(FormControlContext_default.Provider, {
        value: childContext,
        children: (0, import_jsx_runtime.jsx)(FormControlRoot, _extends({
          as: component,
          ownerState,
          className: clsx_m_default(classes.root, className),
          ref
        }, other, {
          children
        }))
      });
    });
    true ? FormControl.propTypes = {
      children: import_prop_types.default.node,
      classes: import_prop_types.default.object,
      className: import_prop_types.default.string,
      color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["primary", "secondary", "error", "info", "success", "warning"]), import_prop_types.default.string]),
      component: import_prop_types.default.elementType,
      disabled: import_prop_types.default.bool,
      error: import_prop_types.default.bool,
      focused: import_prop_types.default.bool,
      fullWidth: import_prop_types.default.bool,
      hiddenLabel: import_prop_types.default.bool,
      margin: import_prop_types.default.oneOf(["dense", "none", "normal"]),
      required: import_prop_types.default.bool,
      size: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["medium", "small"]), import_prop_types.default.string]),
      sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object]),
      variant: import_prop_types.default.oneOf(["filled", "outlined", "standard"])
    } : void 0;
    FormControl_default = FormControl;
  }
});

// node_modules/@mui/material/esm/FormControl/index.js
var FormControl_exports = {};
__export(FormControl_exports, {
  default: () => FormControl_default,
  formControlClasses: () => formControlClasses_default,
  getFormControlUtilityClasses: () => getFormControlUtilityClasses,
  useFormControl: () => useFormControl
});
var init_FormControl2 = __esm({
  "node_modules/@mui/material/esm/FormControl/index.js"() {
    init_FormControl();
    init_useFormControl();
    init_formControlClasses();
    init_formControlClasses();
  }
});

export {
  getFormControlUtilityClasses,
  formControlClasses_default,
  FormControl_default,
  FormControl_exports,
  init_FormControl2 as init_FormControl
};
//# sourceMappingURL=chunk-H25S4FKH.js.map
