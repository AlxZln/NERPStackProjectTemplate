import {
  init_useFormControl,
  useFormControl
} from "./chunk-HVKUKNWF.js";
import {
  ButtonBase_default,
  init_ButtonBase
} from "./chunk-YVITGKJX.js";
import {
  init_useControlled,
  useControlled_default
} from "./chunk-V5PASEWU.js";
import {
  capitalize_default,
  init_capitalize
} from "./chunk-PXNO57KY.js";
import {
  init_base
} from "./chunk-AYRUKP22.js";
import {
  init_generateUtilityClass,
  init_styled,
  styled_default
} from "./chunk-JALNUSSG.js";
import {
  clsx_m_default,
  init_clsx_m
} from "./chunk-QA6UPO5E.js";
import {
  _objectWithoutPropertiesLoose,
  init_objectWithoutPropertiesLoose
} from "./chunk-FSUFDOTD.js";
import {
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_esm,
  refType_default
} from "./chunk-DUIUJXMV.js";
import {
  require_prop_types
} from "./chunk-F2ITIO7K.js";
import {
  require_jsx_runtime
} from "./chunk-U62YBD46.js";
import {
  _extends,
  init_extends
} from "./chunk-WH2AMN5A.js";
import {
  require_react
} from "./chunk-YP55OVAM.js";
import {
  __esm,
  __toESM
} from "./chunk-S5KM4IGW.js";

// node_modules/@mui/material/esm/internal/switchBaseClasses.js
function getSwitchBaseUtilityClass(slot) {
  return generateUtilityClass("PrivateSwitchBase", slot);
}
var switchBaseClasses;
var init_switchBaseClasses = __esm({
  "node_modules/@mui/material/esm/internal/switchBaseClasses.js"() {
    init_esm();
    init_generateUtilityClass();
    switchBaseClasses = generateUtilityClasses("PrivateSwitchBase", ["root", "checked", "disabled", "input", "edgeStart", "edgeEnd"]);
  }
});

// node_modules/@mui/material/esm/internal/SwitchBase.js
var React, import_prop_types, import_jsx_runtime, import_jsx_runtime2, _excluded, useUtilityClasses, SwitchBaseRoot, SwitchBaseInput, SwitchBase, SwitchBase_default;
var init_SwitchBase = __esm({
  "node_modules/@mui/material/esm/internal/SwitchBase.js"() {
    init_objectWithoutPropertiesLoose();
    init_extends();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx_m();
    init_esm();
    init_base();
    init_capitalize();
    init_styled();
    init_useControlled();
    init_useFormControl();
    init_ButtonBase();
    init_switchBaseClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    import_jsx_runtime2 = __toESM(require_jsx_runtime());
    _excluded = ["autoFocus", "checked", "checkedIcon", "className", "defaultChecked", "disabled", "disableFocusRipple", "edge", "icon", "id", "inputProps", "inputRef", "name", "onBlur", "onChange", "onFocus", "readOnly", "required", "tabIndex", "type", "value"];
    useUtilityClasses = (ownerState) => {
      const {
        classes,
        checked,
        disabled,
        edge
      } = ownerState;
      const slots = {
        root: ["root", checked && "checked", disabled && "disabled", edge && `edge${capitalize_default(edge)}`],
        input: ["input"]
      };
      return composeClasses(slots, getSwitchBaseUtilityClass, classes);
    };
    SwitchBaseRoot = styled_default(ButtonBase_default)(({
      ownerState
    }) => _extends({
      padding: 9,
      borderRadius: "50%"
    }, ownerState.edge === "start" && {
      marginLeft: ownerState.size === "small" ? -3 : -12
    }, ownerState.edge === "end" && {
      marginRight: ownerState.size === "small" ? -3 : -12
    }));
    SwitchBaseInput = styled_default("input")({
      cursor: "inherit",
      position: "absolute",
      opacity: 0,
      width: "100%",
      height: "100%",
      top: 0,
      left: 0,
      margin: 0,
      padding: 0,
      zIndex: 1
    });
    SwitchBase = React.forwardRef(function SwitchBase2(props, ref) {
      const {
        autoFocus,
        checked: checkedProp,
        checkedIcon,
        className,
        defaultChecked,
        disabled: disabledProp,
        disableFocusRipple = false,
        edge = false,
        icon,
        id,
        inputProps,
        inputRef,
        name,
        onBlur,
        onChange,
        onFocus,
        readOnly,
        required,
        tabIndex,
        type,
        value
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const [checked, setCheckedState] = useControlled_default({
        controlled: checkedProp,
        default: Boolean(defaultChecked),
        name: "SwitchBase",
        state: "checked"
      });
      const muiFormControl = useFormControl();
      const handleFocus = (event) => {
        if (onFocus) {
          onFocus(event);
        }
        if (muiFormControl && muiFormControl.onFocus) {
          muiFormControl.onFocus(event);
        }
      };
      const handleBlur = (event) => {
        if (onBlur) {
          onBlur(event);
        }
        if (muiFormControl && muiFormControl.onBlur) {
          muiFormControl.onBlur(event);
        }
      };
      const handleInputChange = (event) => {
        if (event.nativeEvent.defaultPrevented) {
          return;
        }
        const newChecked = event.target.checked;
        setCheckedState(newChecked);
        if (onChange) {
          onChange(event, newChecked);
        }
      };
      let disabled = disabledProp;
      if (muiFormControl) {
        if (typeof disabled === "undefined") {
          disabled = muiFormControl.disabled;
        }
      }
      const hasLabelFor = type === "checkbox" || type === "radio";
      const ownerState = _extends({}, props, {
        checked,
        disabled,
        disableFocusRipple,
        edge
      });
      const classes = useUtilityClasses(ownerState);
      return (0, import_jsx_runtime2.jsxs)(SwitchBaseRoot, _extends({
        component: "span",
        className: clsx_m_default(classes.root, className),
        centerRipple: true,
        focusRipple: !disableFocusRipple,
        disabled,
        tabIndex: null,
        role: void 0,
        onFocus: handleFocus,
        onBlur: handleBlur,
        ownerState,
        ref
      }, other, {
        children: [(0, import_jsx_runtime.jsx)(SwitchBaseInput, _extends({
          autoFocus,
          checked: checkedProp,
          defaultChecked,
          className: classes.input,
          disabled,
          id: hasLabelFor && id,
          name,
          onChange: handleInputChange,
          readOnly,
          ref: inputRef,
          required,
          ownerState,
          tabIndex,
          type
        }, type === "checkbox" && value === void 0 ? {} : {
          value
        }, inputProps)), checked ? checkedIcon : icon]
      }));
    });
    true ? SwitchBase.propTypes = {
      autoFocus: import_prop_types.default.bool,
      checked: import_prop_types.default.bool,
      checkedIcon: import_prop_types.default.node.isRequired,
      classes: import_prop_types.default.object,
      className: import_prop_types.default.string,
      defaultChecked: import_prop_types.default.bool,
      disabled: import_prop_types.default.bool,
      disableFocusRipple: import_prop_types.default.bool,
      edge: import_prop_types.default.oneOf(["end", "start", false]),
      icon: import_prop_types.default.node.isRequired,
      id: import_prop_types.default.string,
      inputProps: import_prop_types.default.object,
      inputRef: refType_default,
      name: import_prop_types.default.string,
      onBlur: import_prop_types.default.func,
      onChange: import_prop_types.default.func,
      onFocus: import_prop_types.default.func,
      readOnly: import_prop_types.default.bool,
      required: import_prop_types.default.bool,
      sx: import_prop_types.default.object,
      tabIndex: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
      type: import_prop_types.default.string.isRequired,
      value: import_prop_types.default.any
    } : void 0;
    SwitchBase_default = SwitchBase;
  }
});

export {
  SwitchBase_default,
  init_SwitchBase
};
//# sourceMappingURL=chunk-VU5N64TS.js.map
